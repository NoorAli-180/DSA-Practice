...GIT COMMANDS...

0)	git status
	git status -s

1)	touch <filename> => {creates a new file in directory}

2)	git init => {initialize the repository to git, basically to track changes}

3)	ls => {list all the folders in the directory}

4)	ls -lart => {list all the folders as well as hidden folders, (including => .git folder)} 

5)	ls -a => {same as above }

6)	git add => { transfer the file to staging area/tracking area}
	git add index.html
	git add -A / git add . => {transfer all the files in directory to staging area}

7)	git commit -m <commit message> => {commit all the changes in the repository}

8)	git commit -a -m <commit message> => {add and commit all the files at same time}
 
9)	git checkout <file name> => {matches the file with previouse commit and undo the changes}
	git checkout -f => {matches all the files in repo with previouse commit and undo the changes}

10)	git log => {show/log all the previous commits}

11)	git log -p -1/-2 => {show/log the desired previous commits}

12)	git diff => {compares the working directory with staging area}
		    {if working directory and staging area are same will show nothing}
	git diff --staged => {compares the staging area with last commit}

13)	git rm <file name> => {removes the file from staging area as well as working directory}
	git rm --cached <file name> => {removes the file from only staging area}

14)	.gitignore [ *.log/html
		     /logs.log  <any filename>
		     ignore/    <other directory>
		   ]
	{ignores all the files/folders mentioned in the .gitignore file while tracking or commiting}.

15)	git push origin master	{origin: remote repo link, master: master-branch}
	git push -u origin master
	
	git remote		{gives origin}
	git remote -v
	git remote add origin <link>
	git remote set-url origin <link>
	
16)	git clone <link>

17)	git branch => {show the all branches present in repo}
	git branch <branch name> => {creates a new branch in repo}
	git checkout <branch name> => {jumps to that branch}

18)
